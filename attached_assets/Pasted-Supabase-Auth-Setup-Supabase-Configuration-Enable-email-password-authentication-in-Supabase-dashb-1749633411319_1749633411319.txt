Supabase Auth Setup
üîß Supabase Configuration
Enable email/password authentication in Supabase dashboard

Install @supabase/supabase-js in Replit

bash
Copy
Edit
npm install @supabase/supabase-js
Set .env variables:

env
Copy
Edit
SUPABASE_URL=https://your-project.supabase.co
SUPABASE_ANON_KEY=your_public_anon_key
‚úÖ Sign Up & Login Logic (client-side)
js
Copy
Edit
// utils/supabaseClient.js
import { createClient } from '@supabase/supabase-js'
export const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY)
js
Copy
Edit
// Auth methods
async function signUpWithEmail(email, password) {
  const { user, error } = await supabase.auth.signUp({ email, password })
  return { user, error }
}

async function loginWithEmail(email, password) {
  const { user, error } = await supabase.auth.signInWithPassword({ email, password })
  return { user, error }
}

async function logout() {
  await supabase.auth.signOut()
}
‚úÖ STEP 2: On Signup ‚Üí Create Stripe Customer
üßæ Server-side Endpoint: /api/create-stripe-user
ts
Copy
Edit
import Stripe from 'stripe'
import { supabase } from './supabaseAdmin'

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY)

export default async function handler(req, res) {
  const { email, user_id } = req.body

  // Create customer in Stripe
  const customer = await stripe.customers.create({
    email,
    metadata: { supabase_user_id: user_id }
  })

  // Store in Supabase
  await supabase.from('profiles').insert([
    { id: user_id, stripe_customer_id: customer.id, plan: 'free', quote_count: 0 }
  ])

  res.status(200).json({ success: true })
}
Call this after user signup is successful.

üß± STEP 3: Supabase Table: profiles
sql
Copy
Edit
CREATE TABLE profiles (
  id UUID PRIMARY KEY REFERENCES auth.users(id),
  email TEXT,
  stripe_customer_id TEXT,
  plan TEXT DEFAULT 'free',
  quote_count INT DEFAULT 0,
  created_at TIMESTAMP DEFAULT now()
);
üí∏ STEP 4: Stripe Subscription Tiers (Sync to Supabase)
Use Stripe Webhooks to listen for subscription updates:

bash
Copy
Edit
stripe listen --forward-to localhost:3000/api/webhook
Example Webhook Handler /api/webhook.js:

js
Copy
Edit
import Stripe from 'stripe'
import { supabase } from './supabaseAdmin'

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY)

export default async function handler(req, res) {
  const sig = req.headers['stripe-signature']
  const event = stripe.webhooks.constructEvent(req.body, sig, process.env.STRIPE_WEBHOOK_SECRET)

  if (event.type === 'customer.subscription.updated') {
    const subscription = event.data.object
    const customerId = subscription.customer

    // Find Supabase user by Stripe customer ID
    const { data: profile } = await supabase.from('profiles')
      .select('id')
      .eq('stripe_customer_id', customerId)
      .single()

    const plan = subscription.items.data[0].price.nickname // e.g., "Pro"

    // Update user's plan
    await supabase.from('profiles')
      .update({ plan })
      .eq('id', profile.id)
  }

  res.status(200).send('Webhook handled')
}
üîê STEP 5: Use Auth Session to Load User Calculators
js
Copy
Edit
const session = await supabase.auth.getSession()
const user = session?.data?.session?.user

const { data: calculators } = await supabase
  .from('user_calculators')
  .select('*')
  .eq('user_id', user.id)
‚úÖ Final Result
‚úÖ Secure signup/login via Supabase

‚úÖ Stripe customer and subscription synced on account creation

‚úÖ User tier, ID, and usage tracked in Supabase

‚úÖ All calculator instances tied to authenticated user

‚úÖ Free tier has 5-quote limit, paid plans unlock more (use quote counter field)